前言
每个项目都会有一个代号, 这个项目代号为[珊瑚]coral

基于springboot, netty, disruptor高并发游戏服务器
持久层, 网络层, 业务层分离, 可根据需要随时装卸替换持久层与网络层, 不影响业务代码

1. 支持了TCP, WEBSOCKET两种通讯方式.
2. 玩家线程所有操作串行执行, 玩家个人模块无需考虑线程安全.
3. 自己上一代的框架, 登录初始化绝大部分的模块数据, 相比较之前框架, 采取了懒加载模式, 有需要时加载.
4. 取消掉了二级缓存操作, 因为暂时没有想到好的方式做统一, 只能在本地一级缓存内缓存数据.
5. 为了往后可以支持spring5响应式特性, 所以基于springboot搭建的框架.
6.

1.coral-orm 持久层
1.1 redis缓存- 预计实现
	作为项目的二级缓存, 需要存储的数据先加入到redis.1分钟存储一次. 用于容灾处理
1.2 mysql存储-已实现
	作为项目持久层,通用接口异步存储所有玩家数据.
	
2.coral-net 网络层, 同时支持两种协议, 可通过配置自由选择网络通讯方式.
2.1 tcp 已支持
2.2 websocket 已支持
2.3 RPC远程调用, 暂未支持. https://blog.csdn.net/belonghuang157405/article/details/84070689

3.底层支持akka Actor, 用于支持业务线程安全.暂未支持


2021.01.08
1. 异步存储那块做的不够好, 没有通过接口统一处理.
	思考: 异步存储和同步存储通过一个对象实现, 不需要分为两个对象, 通过此对象统一调用.
	如果分为两个对象,那么存储这块涉及到线程安全.
2. 异步存储,目前使用命令模式处理,这种方式不太友好,需要思考终极方案.
3. 异步存储,区分开了CommandType 读写模式, 但实际没用上...按照最初设计，应该是读写分离。
	也就是写线程延迟，查线程默认查缓存，但是目前缓存被干掉了，所以这里有冲突


