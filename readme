前言
每个项目都会有一个代号, 这个项目代号为[珊瑚]coral

基于springboot, netty, disruptor高并发游戏服务器
持久层, 网络层, 业务层分离, 可根据需要随时装卸替换持久层与网络层, 不影响业务代码

1. 支持了TCP, WEBSOCKET两种通讯方式.
2. 玩家线程所有操作串行执行, 玩家个人模块无需考虑线程安全.
3. 自己上一代的框架, 登录初始化绝大部分的模块数据, 相比较之前框架, 采取了懒加载模式, 有需要时加载.
4. 取消掉了二级缓存操作, 因为暂时没有想到好的方式做统一, 只能在本地一级缓存内缓存数据.
5. 为了往后可以支持spring5响应式特性, 所以基于springboot搭建的框架.
6.

1.coral-orm 持久层
1.1 redis缓存- 已实现
	作为项目的二级缓存, 需要存储的数据先加入到redis.1分钟存储一次. 用于容灾处理
1.2 mysql存储-已实现
	作为项目持久层,通用接口异步存储所有玩家数据.
	
2.coral-net 网络层, 同时支持两种协议, 可通过配置自由选择网络通讯方式.
2.1 tcp 已支持
2.2 websocket 已支持
2.3 RPC远程调用, 暂未支持. https://blog.csdn.net/belonghuang157405/article/details/84070689

3.底层支持akka Actor, 用于支持业务线程安全.暂未支持, 考虑不支持此项


2021.01.08
1. 异步存储那块做的不够好, 没有通过接口统一处理.
	思考: 异步存储和同步存储通过一个对象实现, 不需要分为两个对象, 通过此对象统一调用.
	如果分为两个对象,那么存储这块涉及到线程安全.
2. 异步存储,目前使用命令模式处理,这种方式不太友好,需要思考终极方案.
3. 异步存储,区分开了CommandType 读写模式, 但实际没用上...按照最初设计，应该是读写分离。
	也就是写线程延迟，查线程默认查缓存，但是目前缓存被干掉了，所以这里有冲突

2021.01.27
1. 增加redis支持, 使用的redisson客户端工具, 说实话这个工具封装的还算强大, 但是代码写的很一般

2021.02.22
1. 资源管理已经支持, 新增资源服务器端比较容易
2. 武将管理未完全支持, 只是做了基本结构
3. 任务处理器已经完全支持, 一套逻辑所有任务模块使用
4. 战斗逻辑未完全支持, 没想好做什么类型的游戏, 所以只是做了属性树
5. 聊天逻辑, 写了几套, 目前这套最不理想, 后续需要修改
6. 2021.01.08的遗留问题项已经处理完成, 但是牺牲了部分性能, 不能对同一对象进行覆盖入库, 需要逐个入库, 这个可以想办法优化
7. 2021.01.27的遗留项, 最后放弃使用了redisson客户端工具, 使用lettuce客户端工具.已经封装好随时可以用. 在持久层支持redis操作


2021.02.25
1. 完成:使用dubbo作为RPC首选项, 在网络层支持RPC调用, 新增coral-api作为抽象接口工程
2. 完成:新增coral-test工程, 用于rpc测试客户端, 目前rpc连接测试已经调试成功
3. 预计完成: 减负, 剔除掉服务器工程多余的第三方依赖包, 目前启动时间增加了60%, 优化项目启动速度!
4. 预计完成: 压力测试, 查看线程量是否超过了指定数量.

2021.02.26
1. 今天发现使用springboot-dubbo依赖包,移动后对象的依赖变成了dubbo管理, spring无法代理, 提示大量如下错误,
 Bean 'io.dubbo.springboot.DubboAutoConfiguration' of type 
 [io.dubbo.springboot.DubboAutoConfiguration$$EnhancerBySpringCGLIB$$bb51a857] 
 is not eligible for getting processed by all BeanPostProcessors 
 (for example: not eligible for auto-proxying)
在网上查阅资料得知, 业务bean在BeanPostProcessors(BPP)实例化前被实例化了。理想情况下应该让spring先实例化所有的BPP后，再实例化我们的业务bean，
这样业务bean才能被所有BPP处理，如果有业务bean先于任何BPP实例化，那么这个业务bean就不会被还未实例化的BPP处理了，这个就是日志提示的原因。

尝试了网上几种解决方法, 并不能解决实质问题, 我这里产生的原因就是, 只要集成了springboot-dubbo 并且扫描业务service就会出现此问题
最終解決方法：springboot-dubbo改为了apache-dubbo依赖, 解决了代理问题

